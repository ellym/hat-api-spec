openapi: "3.0.0"
info:
  version: 0.0.1
  title: WDT Hail API
  description: |
    This is a draft spec for the WDT hail event API that will be developed in
    conjunction with HAT.
servers:
  - url: http://wdt.example.com/v1
security:
  - bearerAuth: []
paths:
  /hail_events/{date}:
    get:
      summary: /hail_events/{date}
      description: |
        Returns hail events for a specific date that intersect with the supplied geometry.
      parameters:
        - name: date
          in: path
          required: true
          type: string
          format: date
          example: '2018-04-06'
          description: |
            A date on which to search for hail data at the specified geo
            location. The date is interpreted as a UTC date field.

            **Please review**: How ought this date field be interpreted in
            terms of time zone boundries etc.
        - name: geometry
          in: query
          required: true
          type: string
          format: wkt
          example: 'POINT(73.0185097465598 33.6810265037665)'
          description: |
            A PostGIS compatible EWKT string representing the geometry of the
            area for which we are querying. An intersection will be run with
            this geometry and the hail events for the given date.

            **Please Review**: I have specified this as WKT because that would be easy
            to get into a PostGIS query. It might make more sense to use
            geoJSON and switch this to a POST endpoint so we can include it in
            the body. Let's discuss.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HailEvent'
        '422':
          description: |
            This will be sent if the user requested a date that is no longer
            available via this API, if the geometry was malformed, or any other
            error with the request payload.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Error'
        '500':
          description: Unexpected Error
          content:
            application/json:
              schema:
                typpe: array
                items:
                  $ref: '#components/schemas/Error'

  /hail_history_reports:
    post:
      summary: /hail_history_reports
      description: |
        This endpoint is designed to be asynchronous. For operations that are
        out of scope for the `/hail_events/{date}` (i.e. they return a `422`)
        this endpoint can serve them because it does not have to finish the
        calculations within the context of a single request.

      parameters:
        - name: window_start_at
          in: query
          required: true
          type: string
          format: date-time
          example: '2017-07-12T00:00:00Z'
          description: |
            The beginning of the window for which the user wants to report.
            Only events after this date-time will be returned.
        - name: window_end_at
          in: query
          required: true
          type: string
          format: date-time
          example: '2018-03-31T23:59:59Z'
          description: |
            The end of the window for which the user wants to report. Only
            events before this date-time will be returned.
        - name: geometry
          in: query
          required: true
          type: string
          format: wkt
          example: 'POINT(73.0185097465598 33.6810265037665)'
          description: |
            A PostGIS compatible EWKT string representing the geometry of the
            area for which we are querying. An intersection will be run with
            this geometry and the hail events for the given date.

            **Please Review**: I have specified this as WKT because that would be easy
            to get into a PostGIS query. It might make more sense to use
            geoJSON and switch this to a POST endpoint so we can include it in
            the body. I'm really fine either way.
        - name: callback_url
          in: query
          type: string
          example: 'http://example.com/callbacks/hail_report_complete'
          description: |
            The URL that will be notified when the hail history report is
            completed.

      callbacks:
        completed:
          '{$request.parameters#/callback_url':
            post:
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/HailHistoryReport'

      responses:
        '202':
          description: Accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HailHistoryReportStatus'


components:
  securitySchemes:
    bearerAuth:
      type: https
      scheme: bearer
  schemas:
    HailEvent:
      type: object
      properties:
        window_start_at:
          type: string
          format: date-time
          description: |
            When was the earliest this event could have taken place, or said
            another way, when was the beginning of this observation window?
        window_end_at:
          type: string
          format: date-time
          description: |
            When was the latest this event could have taken place, or said
            another way, when was the end of this observation window?
        max_hail_size:
          type: number
          format: double
          description: |
            The maximum hail size that occurred in this geometry.
        shape_data:
          $ref: '#/components/schemas/ShapeData'

    ShapeData:
      type: object
      properties:
        type:
          type: string
          enum: ['wkt', 'geojosn', 'shape']
          description: |
            This describes what the format of the data that is being referenced is.
        payload:
          type: string
          format: byte
          nullable: true
          description: |
            This is the actual data in the key. This may be `null` if a `uri`
            is provided to download the payload outside of this request. Either
            this or `uri` must be present.
        uri:
          type: string
          nullable: true
          description: |
            A URI to download the data in a separate request. Either this or
            `payload` must be present.


    Error:
      type: object
      properties:
        message:
          type: string
          description: |
            Describe the error that occurred

    GeometryParam:
      description: |
        A PostGIS compatible EWKT string representing the geometry of the
        area for which we are querying. An intersection will be run with
        this geometry and the hail events for the given date.

        **Please Review**: I have specified this as WKT because that would be easy
        to get into a PostGIS query. It might make more sense to use
        geoJSON and switch this to a POST endpoint so we can include it in
        the body. I'm really fine either way.
      schema:
        type: string
        format: wkt

    HailHistoryReportStatus:
      type: object
      properties:
        id:
          type: integer
          description: |
            Unique identifier for the history report
        status:
          type: string
          enum: ['pending', 'running', 'completed', 'errored']
        progress:
          type: number
          format: double
          minimum: 0
          maximum: 1
        message:
          type: string

    HailHistoryReport:
      type: object
      properties:
        id:
          type: integer
          description: |
            Unique identifier for this history report
        events:
          type: array
          items:
            $ref: '#/components/schemas/HailEvent'
